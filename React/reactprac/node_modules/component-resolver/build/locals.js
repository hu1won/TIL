
/**
 * Resolver methods for resolving local dependencies.
 */

(function(
  // Reliable reference to the global object (i.e. window in browsers).
  global,

  // Dummy constructor that we use as the .constructor property for
  // functions that return Generator objects.
  GeneratorFunction,

  // Undefined value, more compressible than void 0.
  undefined
) {
  var hasOwn = Object.prototype.hasOwnProperty;

  if (global.wrapGenerator) {
    return;
  }

  function wrapGenerator(innerFn, self, tryList) {
    return new Generator(innerFn, self || null, tryList || []);
  }

  global.wrapGenerator = wrapGenerator;
  if (typeof exports !== "undefined") {
    exports.wrapGenerator = wrapGenerator;
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  wrapGenerator.mark = function(genFun) {
    genFun.constructor = GeneratorFunction;
    return genFun;
  };

  // Ensure isGeneratorFunction works when Function#name not supported.
  if (GeneratorFunction.name !== "GeneratorFunction") {
    GeneratorFunction.name = "GeneratorFunction";
  }

  wrapGenerator.isGeneratorFunction = function(genFun) {
    var ctor = genFun && genFun.constructor;
    return ctor ? GeneratorFunction.name === ctor.name : false;
  };

  function Generator(innerFn, self, tryList) {
    var generator = this;
    var context = new Context(tryList);
    var state = GenStateSuspendedStart;

    function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        throw new Error("Generator has already finished");
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          try {
            var info = delegate.generator[method](arg);

            // Delegate generator ran and handled its own exceptions so
            // regardless of what the method was, we continue as if it is
            // "next" with an undefined arg.
            method = "next";
            arg = undefined;

          } catch (uncaught) {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = uncaught;

            continue;
          }

          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          if (state === GenStateSuspendedStart &&
              typeof arg !== "undefined") {
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            throw new TypeError(
              "attempt to send " + JSON.stringify(arg) + " to newborn generator"
            );
          }

          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            delete context.sent;
          }

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }
        }

        state = GenStateExecuting;

        try {
          var value = innerFn.call(self, context);

          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: value,
            done: context.done
          };

          if (value === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } catch (thrown) {
          state = GenStateCompleted;

          if (method === "next") {
            context.dispatchException(thrown);
          } else {
            arg = thrown;
          }
        }
      }
    }

    generator.next = invoke.bind(generator, "next");
    generator.throw = invoke.bind(generator, "throw");
  }

  Generator.prototype.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(triple) {
    var entry = { tryLoc: triple[0] };

    if (1 in triple) {
      entry.catchLoc = triple[1];
    }

    if (2 in triple) {
      entry.finallyLoc = triple[2];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry, i) {
    var record = entry.completion || {};
    record.type = i === 0 ? "normal" : "return";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryList.forEach(pushTryEntry, this);
    this.reset();
  }

  Context.prototype = {
    constructor: Context,

    reset: function() {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      // Pre-initialize at least 20 temporary variables to enable hidden
      // class optimizations for simple generators.
      for (var tempIndex = 0, tempName;
           hasOwn.call(this, tempName = "t" + tempIndex) || tempIndex < 20;
           ++tempIndex) {
        this[tempName] = null;
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    keys: function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    _findFinallyEntry: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") && (
              entry.finallyLoc === finallyLoc ||
              this.prev < entry.finallyLoc)) {
          return entry;
        }
      }
    },

    abrupt: function(type, arg) {
      var entry = this._findFinallyEntry();
      var record = entry ? entry.completion : {};

      record.type = type;
      record.arg = arg;

      if (entry) {
        this.next = entry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      var entry = this._findFinallyEntry(finallyLoc);
      return this.complete(entry.completion);
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry, i);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(generator, resultName, nextLoc) {
      this.delegate = {
        generator: generator,
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
}).apply(this, Function("return [this, function GeneratorFunction(){}]")());

var co = require('co');
var path = require('path');
var fs = require('graceful-fs');
var remotes = require('component-remotes');
var validate = require('component-validator');
var debug = require('debug')('component-resolver:locals');
var Resolver = require('./resolver');
var join = path.join;
var resolve = path.resolve;
var dirname = path.dirname;
var relative = path.relative;

/**
 * Create a branch.
 *
 * @param {String} root
 * @param {Object} component
 * @return {Object} branch
 * @api private
 */

Resolver.prototype.branchLocal = wrapGenerator.mark(function(root, component, parent) {
  var state, i, branch;

  return wrapGenerator(function($ctx0) {
    while (1) switch ($ctx0.prev = $ctx0.next) {
    case 0:
      state = this.state[root];

      if (!(state === 'resolving')) {
        $ctx0.next = 7;
        break;
      }

      $ctx0.next = 4;
      return this.await(root);
    case 4:
      return $ctx0.abrupt("return", $ctx0.sent);
    case 7:
      if (!(state === 'resolved')) {
        $ctx0.next = 16;
        break;
      }

      i = 0;
    case 9:
      if (!(i < this.locals.length)) {
        $ctx0.next = 15;
        break;
      }

      if (!(this.locals[i].path === root)) {
        $ctx0.next = 12;
        break;
      }

      return $ctx0.abrupt("return", this.locals[i]);
    case 12:
      i++;
      $ctx0.next = 9;
      break;
    case 15:
      throw new Error('wtf');
    case 16:
      debug('resolving local at "%s"', root);

      // mark as resolving
      this.state[root] = 'resolving';

      if (!!component) {
        $ctx0.next = 21;
        break;
      }

      return $ctx0.delegateYield(this.read(root), "t0", 20);
    case 20:
      component = $ctx0.t0;
    case 21:
      if (!!component) {
        $ctx0.next = 23;
        break;
      }

      throw new Error('trouble finding component at "' + root + '".');
    case 23:
      branch = {
        type: 'local',
        path: root,
        filename: join(root, 'component.json'),
        node: component,
        parent: parent,
        locals: {},
        dependencies: {},
        dependents: []
      };

      validate(component, {
        filename: branch.filename,
        verbose: this.validate,
      });

      branch.name = component.name
        // implies the folder name as the name
        || root.replace(dirname(root), '').slice(1);

      // canonical names are relevant to the root
      branch.relativePath = relative(this.root, root);

      if (branch.relativePath.slice(0, 2) === '..') {
        debug('not a recommended usage: "' + branch.relativePath + '": requiring components below root may, in some cases, be better solved by using a symlink');
      }

      // normalize path separators: i.e. use '/'
      branch.canonical = (branch.relativePath || branch.name).replace(/\\/g, '/');

      // make sure canonical names are always relative
      // specifically, ./ should be replaced with <app>/
      // note: the root component should NOT have a `./`
      if (branch.parent) branch.canonical = './' + branch.canonical;

      branch.remotes = component.remotes || [];

      if (!parent && !branch.remotes.length) {
        // this is supposed to be the "root" component,
        // but i don't like checking for the existence of
        // the parent because it seems hacky to me.
        branch.remotes = ['local'].concat(remotes.defaults);
      }

      this.resolveRemotes(branch);

      // convert the paths to absolute paths
      branch.paths = (component.paths || []).map(function (dir) {
        return resolve(branch.path, dir)
      });

      this.locals.push(branch);
      this.resolve(branch);
      this.state[root] = 'resolved';
      this.emit(root, branch);
      return $ctx0.abrupt("return", branch);
    case 39:
    case "end":
      return $ctx0.stop();
    }
  }, this);
});

/**
 * Resolve locals.
 *
 * @param {Object} branch
 * @api private
 */

Resolver.prototype.resolveLocals = function (branch, locals) {
  if (!locals) return;
  var ch = this.channel.locals;
  locals.forEach(function (local) {
    ch.push(co(this.resolveLocal(branch, local)));
  }, this);
}

/**
 * Resolve a branch's local dependency.
 *
 * @param {Object} branch
 * @param {String} name
 * @api private
 */

Resolver.prototype.resolveLocal = wrapGenerator.mark(function(branch, name) {
  var path, child;

  return wrapGenerator(function($ctx1) {
    while (1) switch ($ctx1.prev = $ctx1.next) {
    case 0:
      return $ctx1.delegateYield(this.resolveLocalPath(branch, name), "t1", 1);
    case 1:
      path = $ctx1.t1;
      return $ctx1.delegateYield(this.branchLocal(path, null, branch), "t2", 3);
    case 3:
      child = $ctx1.t2;
      branch.locals[name] = child;
      if (!~child.dependents.indexOf(branch)) child.dependents.push(branch);

      if (!(child.node.name != null && child.node.name !== name)) {
        $ctx1.next = 8;
        break;
      }

      throw new Error('component at "' + branch.path + '"\'s name does not match the component\'s');
    case 8:
      debug('resolved local "%s"', branch.name);
    case 9:
    case "end":
      return $ctx1.stop();
    }
  }, this);
});

/**
 * Resolve a locals path. We traverse up the tree until
 * we find a local component with `name` in one of the paths.
 *
 * @param {Object} branch
 * @param {String} name
 * @return {String} root
 * @api private
 */

Resolver.prototype.resolveLocalPath = wrapGenerator.mark(function(branch, name) {
  var parent, paths, i, path;

  return wrapGenerator(function($ctx2) {
    while (1) switch ($ctx2.prev = $ctx2.next) {
    case 0:
      debug('resolving "%s"\'s local dependency "%s".', branch.name, name);
      parent = branch;
    case 2:
      paths = parent.paths;
      i = 0;
    case 4:
      if (!(i < paths.length)) {
        $ctx2.next = 18;
        break;
      }

      path = join(paths[i], name);
      debug('looking up "%s"\'s local dependency "%s" at "%s".', branch.name, name, path);
      $ctx2.prev = 7;
      $ctx2.next = 10;
      return stat(join(path, 'component.json'));
    case 10:
      return $ctx2.abrupt("return", path);
    case 13:
      $ctx2.prev = 13;
      $ctx2.t3 = $ctx2.catch(7);
    case 15:
      i++;
      $ctx2.next = 4;
      break;
    case 18:
      if (parent = parent.parent) {
        $ctx2.next = 2;
        break;
      }
    case 19:
      throw new Error('Cannot resolve "' + branch.name + '\'s local dependency "' + name + '".');
    case 20:
    case "end":
      return $ctx2.stop();
    }
  }, this, [[7, 13]]);
});

/**
 * Read a component at folder/component.json.
 * Also caches it.
 *
 * @param {String} folder
 * @return {Object}
 * @api private
 */

Resolver.prototype.read = wrapGenerator.mark(function read(folder) {
  var filename, buf;

  return wrapGenerator(function read$($ctx3) {
    while (1) switch ($ctx3.prev = $ctx3.next) {
    case 0:
      filename = join(folder, 'component.json');

      if (!(filename in this.cache)) {
        $ctx3.next = 3;
        break;
      }

      return $ctx3.abrupt("return", this.cache[filename]);
    case 3:
      $ctx3.prev = 3;
      $ctx3.next = 6;
      return fs.readFile.bind(null, filename, 'utf8');
    case 6:
      buf = $ctx3.sent;
      $ctx3.next = 14;
      break;
    case 9:
      $ctx3.prev = 9;
      $ctx3.t4 = $ctx3.catch(3);

      if (!($ctx3.t4.code !== "ENOENT")) {
        $ctx3.next = 13;
        break;
      }

      throw $ctx3.t4;
    case 13:
      throw new Error("failed to find a component.json at \"" + filename + "\".");
    case 14:
      $ctx3.prev = 14;
      buf = JSON.parse(buf);
      $ctx3.next = 21;
      break;
    case 18:
      $ctx3.prev = 18;
      $ctx3.t5 = $ctx3.catch(14);
      throw new Error("error parsing the component.json at \"" + filename + "\"");
    case 21:
      return $ctx3.abrupt("return", this.cache[filename] = buf);
    case 22:
    case "end":
      return $ctx3.stop();
    }
  }, this, [[3, 9], [14, 18]]);
});

function stat(filename) {
  return function (done) {
    fs.stat(filename, done)
  }
}
