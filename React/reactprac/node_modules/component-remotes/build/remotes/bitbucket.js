(function(
  // Reliable reference to the global object (i.e. window in browsers).
  global,

  // Dummy constructor that we use as the .constructor property for
  // functions that return Generator objects.
  GeneratorFunction
) {
  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.

  try {
    // Make a reasonable attempt to provide a Promise polyfill.
    var Promise = global.Promise || (global.Promise = require("promise"));
  } catch (ignored) {}

  if (global.regeneratorRuntime) {
    return;
  }

  var runtime = global.regeneratorRuntime =
    typeof exports === "undefined" ? {} : exports;

  function wrap(innerFn, outerFn, self, tryList) {
    return new Generator(innerFn, outerFn, self || null, tryList || []);
  }
  runtime.wrap = wrap;

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  var Gp = Generator.prototype;
  var GFp = GeneratorFunction.prototype = Object.create(Function.prototype);
  GFp.constructor = GeneratorFunction;
  GFp.prototype = Gp;
  Gp.constructor = GFp;

  runtime.mark = function(genFun) {
    genFun.__proto__ = GFp;
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  runtime.async = function(innerFn, self, tryList) {
    return new Promise(function(resolve, reject) {
      var generator = wrap(innerFn, self, tryList);
      var callNext = step.bind(generator.next);
      var callThrow = step.bind(generator.throw);

      function step(arg) {
        try {
          var info = this(arg);
          var value = info.value;
        } catch (error) {
          return reject(error);
        }

        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(callNext, callThrow);
        }
      }

      callNext();
    });
  };

  // Ensure isGeneratorFunction works when Function#name not supported.
  if (GeneratorFunction.name !== "GeneratorFunction") {
    GeneratorFunction.name = "GeneratorFunction";
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = genFun && genFun.constructor;
    return ctor ? GeneratorFunction.name === ctor.name : false;
  };

  function Generator(innerFn, outerFn, self, tryList) {
    var generator = outerFn ? Object.create(outerFn.prototype) : this;
    var context = new Context(tryList);
    var state = GenStateSuspendedStart;

    function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        throw new Error("Generator has already finished");
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          try {
            var info = delegate.iterator[method](arg);

            // Delegate generator ran and handled its own exceptions so
            // regardless of what the method was, we continue as if it is
            // "next" with an undefined arg.
            method = "next";
            arg = undefined;

          } catch (uncaught) {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = uncaught;

            continue;
          }

          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          if (state === GenStateSuspendedStart &&
              typeof arg !== "undefined") {
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            throw new TypeError(
              "attempt to send " + JSON.stringify(arg) + " to newborn generator"
            );
          }

          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            delete context.sent;
          }

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        try {
          var value = innerFn.call(self, context);

          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: value,
            done: context.done
          };

          if (value === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } catch (thrown) {
          state = GenStateCompleted;

          if (method === "next") {
            context.dispatchException(thrown);
          } else {
            arg = thrown;
          }
        }
      }
    }

    generator.next = invoke.bind(generator, "next");
    generator.throw = invoke.bind(generator, "throw");
    generator.return = invoke.bind(generator, "return");

    return generator;
  }

  Gp[typeof Symbol === "function"
     && Symbol.iterator
     || "@@iterator"] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(triple) {
    var entry = { tryLoc: triple[0] };

    if (1 in triple) {
      entry.catchLoc = triple[1];
    }

    if (2 in triple) {
      entry.finallyLoc = triple[2];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry, i) {
    var record = entry.completion || {};
    record.type = i === 0 ? "normal" : "return";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryList.forEach(pushTryEntry, this);
    this.reset();
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    var iterator = iterable;
    var Symbol = global.Symbol;
    if (Symbol && Symbol.iterator in iterable) {
      iterator = iterable[Symbol.iterator]();
    } else if (!isNaN(iterable.length)) {
      var i = -1;
      iterator = function next() {
        while (++i < iterable.length) {
          if (i in iterable) {
            next.value = iterable[i];
            next.done = false;
            return next;
          }
        };
        next.done = true;
        return next;
      };
      iterator.next = iterator;
    }
    return iterator;
  }
  runtime.values = values;

  Context.prototype = {
    constructor: Context,

    reset: function() {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      // Pre-initialize at least 20 temporary variables to enable hidden
      // class optimizations for simple generators.
      for (var tempIndex = 0, tempName;
           hasOwn.call(this, tempName = "t" + tempIndex) || tempIndex < 20;
           ++tempIndex) {
        this[tempName] = null;
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    _findFinallyEntry: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") && (
              entry.finallyLoc === finallyLoc ||
              this.prev < entry.finallyLoc)) {
          return entry;
        }
      }
    },

    abrupt: function(type, arg) {
      var entry = this._findFinallyEntry();
      var record = entry ? entry.completion : {};

      record.type = type;
      record.arg = arg;

      if (entry) {
        this.next = entry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      var entry = this._findFinallyEntry(finallyLoc);
      return this.complete(entry.completion);
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry, i);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
}).apply(this, Function("return [this, function GeneratorFunction(){}]")());
var debug = require('debug')('remotes:bitbucket');

var Remote = require('../remote');

var BITBUCKET_USERNAME = process.env.BITBUCKET_USERNAME;
var BITBUCKET_PASSWORD = process.env.BITBUCKET_PASSWORD;

// BitBucket API version 2.0 is missing a lot of the functionality from the 1.0 API.
var API_VERSION = '1.0';

module.exports = BitBucket;

Remote.extend(BitBucket);

function BitBucket(options) {
  if (!(this instanceof BitBucket))
    return new BitBucket(options)

  options = Object.create(options || {});

  // set the bitbucket API auth via environment
  // otherwise, use netrc or something.
  if (!options.auth && BITBUCKET_USERNAME && BITBUCKET_PASSWORD)
    options.auth = BITBUCKET_USERNAME + ':' + BITBUCKET_PASSWORD

  Remote.call(this, options)
}

BitBucket.prototype.name = 'bitbucket';

BitBucket.prototype.getHash =regeneratorRuntime.mark(function callee$0$0(repo, ref) {
  return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
    case 0:
      console.log('BitBucket.prototype.getHash not implemented yet');
      return context$1$0.abrupt("return", null);
    case 2:
    case "end":
      return context$1$0.stop();
    }
  }, callee$0$0, this);
});

/**
 * DOES NOT SOLVE REDIRECTS!
 *
 * @param {String} repo
 * @return {Array} references
 * @api public
 */

BitBucket.prototype._versions = regeneratorRuntime.mark(function callee$0$1(repo) {
  var uri, res, err, result, temp, key;

  return regeneratorRuntime.wrap(function callee$0$1$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
    case 0:
      uri = 'https://api.bitbucket.org/' + API_VERSION + '/repositories/' + repo + '/tags';
      debug('GET "%s"', uri);
      return context$1$0.delegateYield(this.request(uri, true), "t0", 3);
    case 3:
      res = context$1$0.t0;

      if (!(res.statusCode === 404)) {
        context$1$0.next = 9;
        break;
      }

      err = new Error('failed to get ' + repo + '\'s tags. please check that this repository still exists!');
      err.res = res;
      err.remote = 'bitbucket';
      throw err;
    case 9:
      if (!(res.statusCode === 403)) {
        context$1$0.next = 11;
        break;
      }

      return context$1$0.abrupt("return", errorRateLimitExceeded(res));
    case 11:
      if (!(res.statusCode === 401)) {
        context$1$0.next = 13;
        break;
      }

      return context$1$0.abrupt("return", errorBadCredentials(res));
    case 13:
      if (!(res.statusCode !== 200)) {
        context$1$0.next = 18;
        break;
      }

      err = new Error('failed to get ' + repo + '\'s tags');
      err.res = res;
      err.remote = 'bitbucket';
      throw err;
    case 18:
      result = [];

      for (key in res.body) {
        temp = res.body[key];
        temp.name = key;
        result.push(temp);
      }

      return context$1$0.abrupt("return", result.map(name));
    case 21:
    case "end":
      return context$1$0.stop();
    }
  }, callee$0$1, this);
});

function name(x) {
  return x.name
}

/**
 * Get a component and references's component.json.
 * Tries all endpoints providd by file array returned from BitBucket.prototype.file
 *
 * @param {String} repo
 * @param {String} reference
 * @return {Object} component.json
 * @api public
 */

BitBucket.prototype._json = regeneratorRuntime.mark(function callee$0$2(repo, ref) {
  var retries, uris, uri, res, i, j;

  return regeneratorRuntime.wrap(function callee$0$2$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
    case 0:
      retries = this.retries;
      i = 0;
    case 2:
      if (!(i <= retries)) {
        context$1$0.next = 28;
        break;
      }

      uris = this.file(repo, ref, 'component.json');
      j = 0;
    case 5:
      if (!(j < uris.length)) {
        context$1$0.next = 25;
        break;
      }

      uri = uris[j];
      debug('GET "%s"', uri);
      context$1$0.prev = 8;
      return context$1$0.delegateYield(this.request(uri, true), "t1", 10);
    case 10:
      res = context$1$0.t1;
      context$1$0.next = 17;
      break;
    case 13:
      context$1$0.prev = 13;
      context$1$0.t2 = context$1$0.catch(8);
      debug("error when GETing \"%s\": \"%s", uri, context$1$0.t2.message);
      return context$1$0.abrupt("continue", 22);
    case 17:
      if (!(res.statusCode !== 200)) {
        context$1$0.next = 19;
        break;
      }

      return context$1$0.abrupt("continue", 22);
    case 19:
      if (res.body) {
        context$1$0.next = 21;
        break;
      }

      return context$1$0.abrupt("return", malformedJSON(uri, res));
    case 21:
      return context$1$0.abrupt("return", res.body);
    case 22:
      j++;
      context$1$0.next = 5;
      break;
    case 25:
      i++;
      context$1$0.next = 2;
      break;
    case 28:
    case "end":
      return context$1$0.stop();
    }
  }, callee$0$2, this, [[8, 13]]);
});

/**
 * NOTE: BitBucket API does not currently support Git trees being returned in a JSON response.
 * DOES NOT SOLVE REDIRECTS!
 *
 * @param {String} repo
 * @param {String} ref
 * @return {Array} objects
 * @api public
 */

/*
BitBucket.prototype._tree = function* (repo, ref){
    var err = new Error('failed to get ' + repo + '\'s git tree. The BitBucket API does not support trees.')
    err.res = res
    err.remote = 'github'
    throw err
}
*/

/**
 * Return URLs of download locations for a particular file.
 * The path must be UNIX-style paths. Support both locations
 * of the BitBucket v1 api and the non-API URL for backup.
 *
 * @param {String} repo
 * @param {String} reference
 * @param {Object} object
 * @return {String} urls
 * @api public
 */

BitBucket.prototype.file = function (repo, ref, path) {
  if (typeof path === 'object') path = path.path;

  var tail = repo + '/raw/' + ref + '/' + path;

  return [
    'https://api.bitbucket.org/'+ API_VERSION + '/repositories/' + tail,
    'https://bitbucket.org/api/' + API_VERSION + '/repositories/'+ tail
  ];
}

/**
 * Return URLs of download locations for archives.
 * BitBucket does not have an API endpoint for this, but repo + ref (tag name, branch)
 * will direct you to necessary download.
 * The path must be UNIX style paths.
 * The file format can be any.
 *
 * @param {String} repo
 * @param {String} reference
 * @return {Object} urls
 * @api public
 */

BitBucket.prototype.archive = function (repo, ref) {
  var root = 'https://bitbucket.org/' + repo + '/get/' + ref;
  // ref is optional here - it will default to the default branch
  // which may or may not be master
  ref = ref ? '/' + ref : '';
  return {
    tar: [
      root + '.tar.gz',
    ],
    zip: [
      root + '.zip',
    ],
    bz2: [
      root + '.tar.bz2'
    ]
  }
}


/**
 * Sometimes BitBucket returns malformed JSON with 200.
 * I don't know why.
 *
 * @param {Object} response
 * @api private
 */

function malformedJSON(uri, res) {
  var err = new Error('bitbucket returned malformed JSON at URL: ' + uri);
  err.res = res;
  err.text = res.text;
  err.remote = 'bitbucket';
  throw err;
}
/**
 * Better error message when rate limit exceeded.
 *
 * @param {Object} response
 * @api private
 */

function errorRateLimitExceeded(res) {
  var err = new Error('BitBucket rate limit exceeded. This is usually very unlikely to happen unless using the REST API to create forks or users - see https://github.com/component/guide/blob/master/changelogs/1.0.0.md#required-authentication');
  err.res = res;
  err.remote = 'bitbucket';
  throw err;
}

/**
 * Better error message when credentials are not supplied.
 *
 * @param {Object} response
 * @api private
 */

function errorBadCredentials(res) {
  var err = new Error('Invalid credentials - please see https://github.com/component/remotes.js#authentication');
  err.res = res;
  err.remote = 'bitbucket';
  throw err;
}
